#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")
#@ load("ifs.lib.yaml", "labels", "name")

#@ def predictors():
sklearn:
  protocolVersion: v2
tensorflow:
  protocolVersion: v1
triton:
  protocolVersion: v2
  args:
    - --strict-model-config=false
#@ end

---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-kserve".format(name(data.values.ifs))
  namespace: #@ data.values.ifs.namespace
  labels: #@ labels(data.values.ifs)
  annotations:
    serving.kserve.io/s3-endpoint: #@ data.values.ifs.model.endpoint
    serving.kserve.io/s3-usehttps: "0"
type: Opaque
stringData: #@ data.values.ifs.model.secretData

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ "{}-kserve".format(name(data.values.ifs))
  namespace: #@ data.values.ifs.namespace
  labels: #@ labels(data.values.ifs)
secrets:
  - name: #@ "{}-kserve".format(name(data.values.ifs))

---
apiVersion: serving.kserve.io/v1beta1
kind: InferenceService
metadata:
  name: #@ name(data.values.ifs)
  namespace: #@ data.values.ifs.namespace
  labels: #@ labels(data.values.ifs)
spec:
  predictor:
    serviceAccountName: #@ "{}-kserve".format(name(data.values.ifs))
    timeout: 60
    #@yaml/text-templated-strings
    (@= data.values.ifs.predictor.type @):
      _: #@ template.replace(predictors()[data.values.ifs.predictor.type]) if data.values.ifs.predictor.type in predictors() else assert.fail("Predictor '{}' not supported".format(data.values.ifs.predictor.type))
      storageUri: #@ data.values.ifs.model.storageUri
      #@ if/end data.values.ifs.predictor.runtimeVersion:
      runtimeVersion: #@ data.values.ifs.predictor.runtimeVersion
      resources:
        limits:
          cpu: 1
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 128Mi

#@overlay/match by=overlay.subset({"kind": "InferenceService"})
---
spec:
  predictor:
    #@yaml/text-templated-strings
    (@= data.values.ifs.predictor.type @):
      resources:
        #@overlay/match-child-defaults missing_ok=True
        #@ if/end data.values.ifs.predictor.resources:
        limits: #@ data.values.ifs.predictor.resources.limits
